name: 'Terraform Deploy'

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: '1.6.0'
  AWS_REGION: 'us-east-1'

jobs:
  terraform-validate:
    name: 'Terraform Validate'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      run: |
        cd terraform
        echo "Auto-formatting Terraform files..."
        terraform fmt -recursive
        echo "Terraform files formatted successfully!"

    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    - name: Terraform Validate
      run: |
        cd terraform
        terraform validate

    - name: Basic Security Check
      run: |
        cd terraform
        echo "Running basic security checks..."
        # Check for hardcoded secrets (demo purpose)
        if grep -r "password.*=" . --exclude-dir=.git || grep -r "secret.*=" . --exclude-dir=.git; then
          echo "Warning: Potential hardcoded secrets found"
        else
          echo "No obvious hardcoded secrets detected"
        fi

  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan')
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Setup AWS Credentials (AWS Educate)
      run: |
        mkdir -p ~/.aws
        cat > ~/.aws/credentials << EOF
        [default]
        aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws_session_token = ${{ secrets.AWS_SESSION_TOKEN }}
        EOF
        
        cat > ~/.aws/config << EOF
        [default]
        region = ${{ env.AWS_REGION }}
        output = json
        EOF
        
        # Verify AWS connection
        aws sts get-caller-identity

    - name: Create terraform.tfvars
      run: |
        cd terraform
        cat > terraform.tfvars << EOF
        # AWS Configuration
        aws_region  = "${{ env.AWS_REGION }}"
        environment = "prod"
        owner       = "NidhunMurali"

        # S3 Configuration
        s3_bucket_names = [
          "nm1811conestoga-terraform-bucket-1",
          "nm1811conestoga-terraform-bucket-2",
          "nm1811conestoga-terraform-bucket-3",
          "nm1811conestoga-terraform-bucket-4"
        ]
        enable_s3_versioning = true

        # VPC Configuration
        vpc_cidr             = "10.0.0.0/16"
        public_subnet_cidrs  = ["10.0.1.0/24", "10.0.2.0/24"]
        private_subnet_cidrs = ["10.0.10.0/24", "10.0.20.0/24"]
        availability_zones   = ["us-east-1a", "us-east-1b"]

        # EC2 Configuration
        instance_type     = "t2.micro"
        ami_id           = "ami-0c02fb55956c7d316"
        key_pair_name    = "nmkey"
        enable_public_ip = true

        # RDS Configuration
        db_instance_class       = "db.t3.micro"
        db_engine              = "mysql"
        db_engine_version      = "8.0"
        db_name                = "mydb"
        db_username            = "admin"
        db_password            = "${{ secrets.DB_PASSWORD }}"
        db_allocated_storage   = 20
        db_publicly_accessible = true

        # Security Configuration
        allowed_ssh_cidrs = ["0.0.0.0/0"]
        allowed_db_cidrs  = ["10.0.0.0/16"]
        EOF

    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan -var-file="terraform.tfvars" -detailed-exitcode -out=tfplan

    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: terraform/tfplan

  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Setup AWS Credentials (AWS Educate)
      run: |
        mkdir -p ~/.aws
        cat > ~/.aws/credentials << EOF
        [default]
        aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws_session_token = ${{ secrets.AWS_SESSION_TOKEN }}
        EOF
        
        cat > ~/.aws/config << EOF
        [default]
        region = ${{ env.AWS_REGION }}
        output = json
        EOF
        
        # Verify AWS connection
        aws sts get-caller-identity

    - name: Create terraform.tfvars
      run: |
        cd terraform
        cat > terraform.tfvars << EOF
        aws_region = "${{ env.AWS_REGION }}"
        environment = "prod"
        owner = "NidhunMurali"
        
        s3_bucket_names = [
          "nm1811conestoga-terraform-bucket-1",
          "nm1811conestoga-terraform-bucket-2",
          "nm1811conestoga-terraform-bucket-3",
          "nm1811conestoga-terraform-bucket-4"
        ]
        
        enable_s3_versioning = true
        vpc_cidr = "10.0.0.0/16"
        public_subnet_cidrs = ["10.0.1.0/24", "10.0.2.0/24"]
        private_subnet_cidrs = ["10.0.10.0/24", "10.0.20.0/24"]
        availability_zones = ["us-east-1a", "us-east-1b"]
        
        instance_type = "t2.micro"
        ami_id = "ami-0c02fb55956c7d316"
        key_pair_name = "nmkey"
        enable_public_ip = true
        
        db_instance_class = "db.t3.micro"
        db_engine = "mysql"
        db_engine_version = "8.0"
        db_name = "mydb"
        db_username = "admin"
        db_password = "${{ secrets.DB_PASSWORD }}"
        db_allocated_storage = 20
        db_publicly_accessible = true
        
        allowed_ssh_cidrs = ["0.0.0.0/0"]
        allowed_db_cidrs = ["10.0.0.0/16"]
        EOF

    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan -var-file="terraform.tfvars" -out=tfplan

    - name: Terraform Apply
      run: |
        cd terraform
        terraform apply -var-file="terraform.tfvars" tfplan

    - name: Save Terraform Outputs
      run: |
        cd terraform
        terraform output -json > terraform-outputs.json

    - name: Upload Terraform Outputs
      uses: actions/upload-artifact@v4
      with:
        name: terraform-outputs
        path: terraform/terraform-outputs.json

    - name: Display Infrastructure URLs
      run: |
        cd terraform
        echo "## ðŸš€ Infrastructure Deployed Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ðŸ“Š Terraform Outputs:" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
        cat terraform-outputs.json >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  terraform-destroy:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Setup AWS Credentials (AWS Educate)
      run: |
        mkdir -p ~/.aws
        cat > ~/.aws/credentials << EOF
        [default]
        aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws_session_token = ${{ secrets.AWS_SESSION_TOKEN }}
        EOF
        
        cat > ~/.aws/config << EOF
        [default]
        region = ${{ env.AWS_REGION }}
        output = json
        EOF
        
        # Verify AWS connection
        aws sts get-caller-identity

    - name: Create terraform.tfvars
      run: |
        cd terraform
        cat > terraform.tfvars << EOF
        aws_region = "${{ env.AWS_REGION }}"
        environment = "prod"
        owner = "NidhunMurali"
        
        s3_bucket_names = [
          "nm1811conestoga-terraform-bucket-1",
          "nm1811conestoga-terraform-bucket-2",
          "nm1811conestoga-terraform-bucket-3",
          "nm1811conestoga-terraform-bucket-4"
        ]
        
        enable_s3_versioning = true
        vpc_cidr = "10.0.0.0/16"
        public_subnet_cidrs = ["10.0.1.0/24", "10.0.2.0/24"]
        private_subnet_cidrs = ["10.0.10.0/24", "10.0.20.0/24"]
        availability_zones = ["us-east-1a", "us-east-1b"]
        
        instance_type = "t2.micro"
        ami_id = "ami-0c02fb55956c7d316"
        key_pair_name = "nmkey"
        enable_public_ip = true
        
        db_instance_class = "db.t3.micro"
        db_engine = "mysql"
        db_engine_version = "8.0"
        db_name = "mydb"
        db_username = "admin"
        db_password = "${{ secrets.DB_PASSWORD }}"
        db_allocated_storage = 20
        db_publicly_accessible = true
        
        allowed_ssh_cidrs = ["0.0.0.0/0"]
        allowed_db_cidrs = ["10.0.0.0/16"]
        EOF

    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    - name: Terraform Destroy
      run: |
        cd terraform
        terraform destroy -var-file="terraform.tfvars" -auto-approve
